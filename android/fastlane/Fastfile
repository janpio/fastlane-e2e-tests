default_platform('android')

before_all do |lane, options|
  unless lane_context[SharedValues::ENVIRONMENT]
    UI.error("This `Fastfile` uses environments. Please supply an available environment via `--env <name>`")
    raise('foo')
  end

  @project = ENV['PROJECT']
end



lane :environment do
  UI.message(lane_context[SharedValues::ENVIRONMENT])
  UI.message(ENV['PROJECT'])
  UI.message(ENV['PACKAGE_NAME'])
  UI.message(ENV['JSON_KEY_FILE'])
end

platform :android do
  lane :all do
    create_appfile

    build_release # something to upload in next step
    run_supply_init

    run_screengrab_init
    config_screengrab
    add_screengrab_to_project
    build_for_screenshots
    run_screengrab
    screenshots

    build_release

    prepare_metadata
    run_supply
    upload

    cleanup
  end

  #######################################################

  lane :create_appfile do
    create_file('Appfile')
    write_to_file('package_name("' + ENV['PACKAGE_NAME'] + '")', 'Appfile')
    write_to_file('json_key_file("' + ENV['JSON_KEY_FILE'] + '")', 'Appfile')
  end

  #######################################################

  # https://play.google.com/apps/publish/
  # => CREATE APPLICATION
  # language
  # title
  # => App releases
  # Internal test => MANAGE
  # => CREATE RELEASE
  # OPT-OUT => CONFIRM
  # => BROWSE FILES
  # fastlane android build_release
  # Upload
  # Done, now the app is connected to the package_name

  lane :run_supply_init do
    run_fastlane('supply init --package_name=' + ENV['PACKAGE_NAME'] + ' --json-key="' + ENV['JSON_KEY_FILE'] + '"')
  end

  #######################################################

  lane :run_screengrab_init do |_options|
    run_fastlane('screengrab init')
  end

  lane :config_screengrab do
    # Add empty line to file so later additions don't "hug" the template too much
    # write_to_file('', 'Screengrabfile') # TODO: On Windows this writes "ECHO is on." :/
  end

  lane :add_to_project_and_build_and_run_screengrab do
    add_screengrab_to_project
    build_for_screengrab
    run_screengrab
  end

  lane :add_screengrab_to_project do
    package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)

    # TODO: build.gradle
    # modify build.gradle
    # old_line = '...'
    # new_lines = old_line + "\n..."
    # replace_string_in_file('androidapp/app/build.gradle', old_line, new_lines)

    # copy src/debug/AndroidManifest.xml
    source = 'screengrab-resources/AndroidManifest.xml'
    target = '../' + @project + '/app/src/debug'
    ensure_folder_exists(target)
    FileUtils.cp(source, target)
    # copy_artifacts(artifacts: source, target_path: target)
    replace_string_in_file(target + '/AndroidManifest.xml', 'package_name', package_name)

    # copy test file
    package_name_path = package_name.tr('.', '/')
    target = '../' + @project + "/app/src/androidTest/java/#{package_name_path}"
    ensure_folder_exists(target)
    FileUtils.cp('screengrab-resources/ScreengrabTest.java', target)
    # copy_artifacts(artifacts: source, target_path: target)
    replace_string_in_file(target + '/ScreengrabTest.java', 'package_name', package_name)

    puts 'foo'
  end

  lane :build_for_screenshots do
    gradle(
      task: 'clean',
      project_dir: @project
    )

    build_android_app(
      task: 'assemble',
      build_type: 'Debug',
      project_dir: @project
    )
    apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    copy_artifacts(
      fail_on_missing: false,
      artifacts: apk
    )
    write_to_file('app_apk_path("artifacts/' + File.basename(apk) + '")', 'Screengrabfile')

    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest',
      project_dir: @project
    )
    apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    copy_artifacts(
      fail_on_missing: false,
      artifacts: apk
    )
    write_to_file('tests_apk_path("artifacts/' + File.basename(apk) + '")', 'Screengrabfile')
  end

  lane :run_screengrab do
    run_fastlane('screengrab')
  end

  lane :screenshots do
    capture_android_screenshots
  end

  #######################################################

  lane :build_release do
    gradle(
      task: 'clean',
      project_dir: @project
    )

    build_android_app(
      task: 'assemble',
      build_type: 'Release',
      project_dir: @project,
      properties: {
        'android.injected.signing.store.file' => 'keystore.jks',
        'android.injected.signing.store.password' => ENV['KEYSTORE_PASSWORD'],
        'android.injected.signing.key.alias' => ENV['KEYSTORE_ALIAS'],
        'android.injected.signing.key.password' => ENV['KEYSTORE_PASSWORD'],
        # TODO: wtf wieso an so vielen Stellen das file nÃ¶tig?
      }
    )
    apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    copy_artifacts(
      fail_on_missing: false,
      artifacts: apk
    )
  end

  ######################################################

  lane :prepare_metadata do
    # TODO: https://github.com/stympy/faker
    write_to_file('Changed Description!', 'metadata/android/de-DE/full_description.txt')
    # TODO: Images
  end

  lane :run_supply do
    run_fastlane('supply')
  end

  lane :upload do
    upload_to_play_store(
      track: 'alpha',
      apk: 'artifacts/app-release.apk'
    )
  end

  #######################################################

  lane :cleanup do
    File.delete('Appfile')
    File.delete('Screengrabfile')
  end

  #######################################################
end

#######################################################

def create_file(file)
  sh('touch ' + file)
end

def write_to_file(string, file)
  # TODO: handle array
  sh('echo ' + string + ' >> ' + file)
  # TODO: replace by "set_in_file" that changes a value if the "method" already exists
end

def run_fastlane(command)
  Dir.chdir '..' do
    sh('bundle exec fastlane ' + command)
  end
end

def get_relative_path(absolute_path)
  Dir.chdir '..' do
    first = Pathname.new(absolute_path)
    second = Pathname.new(Dir.pwd)

    relative = first.relative_path_from second
    relative.to_s
  end
end

def self.replace_string_in_file(file, string, replacement)
  data = File.read(file)
  filtered_data = data.gsub(string, replacement)
  File.open(file, 'w') do |f|
    f.write(filtered_data)
  end
end

def ensure_folder_exists(folder)
  Dir.exist?(folder) || FileUtils.mkdir_p(folder)
end
