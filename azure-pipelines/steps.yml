steps:

# config

- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.5'
  condition: not(eq(variables['Agent.OS'], 'Darwin')) # not possible on Mac

# preparation

- script: gem install bundler
  displayName: 'install bundler'
  condition: not(eq(variables['Agent.OS'], 'Darwin')) # not needed on mac

- script: |
    cd android
    bundle install --retry=3 --jobs=4
  displayName: 'bundle install'

- script: |
    cd android
    bundle exec fastlane -v
  displayName: 'bundle exec fastlane -v'

## Android

### ANDROID_HOME for Ubuntu
# workaround for https://github.com/Microsoft/azure-pipelines-image-generation/pull/310
- script: |
    echo $ANDROID_SDK_ROOT
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&tabs=yaml%2Cbatch#set-in-script
    echo "##vso[task.setvariable variable=ANDROID_HOME]$ANDROID_SDK_ROOT"
    echo '---'
    ls $ANDROID_SDK_ROOT
    echo '---'
    ls $ANDROID_ROOT
    echo '---'
    ls $ANDROID_SDK_ROOT/..
    echo '---'
    cd $ANDROID_SDK_ROOT
    cd ..
    ls
  condition: eq(variables['Agent.OS'], 'Linux')
  displayName: 'set ANDROID_HOME (Linux)'

### Android Tools

#### Check what is already installed

- script: |
    "%ANDROID_HOME%/tools.old/bin/sdkmanager"  --list
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: 'list already installed android tools (Windows)'

- bash: |
    $ANDROID_SDK_ROOT/../tools/bin/sdkmanager --list
  condition: eq(variables['Agent.OS'], 'Linux')
  displayName: 'list already installed android tools (Linux)'

- bash: |
    $ANDROID_HOME/tools/bin/sdkmanager --list
  condition: eq(variables['Agent.OS'], 'Darwin')
  displayName: 'list already installed android tools (Mac)'

#### Install specific image

- script: |
    REM https://stackoverflow.com/questions/43796568/cant-update-tools-android-sdk-command-line-tools-for-windows
    REM / https://issuetracker.google.com/issues/38094997
    REM https://stackoverflow.com/a/19517873/252627
    xcopy "%ANDROID_HOME%/tools" "%ANDROID_HOME%/tools.old" /e /i /h
    echo "y" | "%ANDROID_HOME%/tools.old/bin/sdkmanager" "system-images;android-27;google_apis;x86"
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: 'install android tools (Windows)'

- bash: |
    echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
  condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))
  displayName: 'install android tools (Mac/Linux)'

### Android Emulator

- script: |
    $ANDROID_HOME/emulator/emulator -list-avds
    echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-27;google_apis;x86' --force
    $ANDROID_HOME/emulator/emulator -list-avds
  condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))
  displayName: 'install android emulator (Mac/Linux)'

- script: |
    $ANDROID_HOME/platform-tools/adb devices
    nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot > /dev/null 2>&1 & $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
    $ANDROID_HOME/platform-tools/adb devices
    echo "Emulator started"
  condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))
  displayName: 'start android emulator (Mac/Linux)'

- script: |
    "%ANDROID_HOME%/emulator/emulator" -list-avds
    echo "n" | "%ANDROID_HOME%/tools/bin/avdmanager" create avd -n test_android_emulator -k "system-images;android-27;google_apis;x86" --force
    "%ANDROID_HOME%/emulator/emulator" -list-avds
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: 'install android emulator (Windows)'

- script: |
    "%ANDROID_HOME%/platform-tools/adb" devices
    "%ANDROID_HOME%/emulator/emulator" -avd test_android_emulator -no-snapshot
    "%ANDROID_HOME%/platform-tools/adb" wait-for-device shell "while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82"
    "%ANDROID_HOME%/platform-tools/adb" devices
    echo "Emulator started"
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: 'start android emulator (Windows)'

### create empty adb file for Windows
# workaround for https://github.com/fastlane/fastlane/issues/13681
- script: |
    cd "%ANDROID_HOME%/platform-tools"
    dir
    copy NUL adb
    dir
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: 'fastlane workaround: create empty adb file (Windows)'

## secure files

- task: DownloadSecureFile@1
  inputs:
    secureFile: google_play_key.json

- task: DownloadSecureFile@1
  inputs:
    secureFile: zaehlerstand.keystore

- script: |
    echo %DOWNLOADSECUREFILE1_SECUREFILEPATH%
    echo %DOWNLOADSECUREFILE2_SECUREFILEPATH%
    REM https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&tabs=yaml%2Cbatch#set-in-script
    echo ##vso[task.setvariable variable=JSON_KEY_FILE]%DOWNLOADSECUREFILE1_SECUREFILEPATH%
    echo ##vso[task.setvariable variable=KEYSTORE_FILE]%DOWNLOADSECUREFILE2_SECUREFILEPATH%
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: 'copy secure file filenames to environment variables (Windows)'

- script: |
    echo $DOWNLOADSECUREFILE1_SECUREFILEPATH
    echo $DOWNLOADSECUREFILE2_SECUREFILEPATH
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&tabs=yaml%2Cbatch#set-in-script
    echo "##vso[task.setvariable variable=JSON_KEY_FILE]$DOWNLOADSECUREFILE1_SECUREFILEPATH"
    echo "##vso[task.setvariable variable=KEYSTORE_FILE]$DOWNLOADSECUREFILE2_SECUREFILEPATH"
  condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
  displayName: 'copy secure file filenames to environment variables (Linux / Mac)'

## make gradlew executable
# workaround for https://developercommunity.visualstudio.com/content/problem/357997/error-permission-on-ubuntu-1604-agent.html?childToView=382739#comment-382739
- bash: |
    cd android/androidapp
    chmod +x gradlew
  condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
  displayName: 'make gradlew executable (Linux / Mac)'

# lanes

- script: |
    cd android
    bundle exec fastlane environment
  displayName: 'bundle exec fastlane environment'

- script: |
    cd android
    bundle exec fastlane all
  displayName: 'bundle exec fastlane all'
